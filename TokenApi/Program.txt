using Application.DTOs;
using Infrastructure.Repositories;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Runtime.CompilerServices;
using System.Security.Claims;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using TokenMan.Extensions;
using TokenMan.Jwt;

var builder = WebApplication.CreateSlimBuilder(args);

builder.Logging.AddConfiguration(builder.Configuration.GetSection("Logging"));

builder.Services.AddSingleton(_ => new CtxUsers(builder.Configuration["AppConfig:LoginRegistryDB"]));
builder.Services.AddSingleton(_ => new CtxTokens(builder.Configuration["AppConfig:LoginRegistryDB"]));

builder.configureJTW();


/*
 builder.Services.ConfigureHttpJsonOptions(options =>
{
    options.SerializerOptions.Converters.Add(item: new JsonStringEnumConverter());
    options.SerializerOptions.TypeInfoResolverChain.Insert(0, AppJsonSerializerContext.Default);
});

builder.Services.AddControllers().AddJsonOptions(options =>
{
    options.JsonSerializerOptions.PropertyNamingPolicy = JsonNamingPolicy.CamelCase;
    // Outras configurações...
});

var jwtSettings = builder.Configuration.GetSection("JwtSettings");
builder.Services.Configure<JwtSettings>(jwtSettings);
builder.Services.AddSingleton<TokenGenerator>();

var appAuth = builder.Configuration.GetSection("AppAuthSettings");
builder.Services.Configure<AppAuthSettings>(builder.Configuration.GetSection("AppAuthSettings"));
//builder.Services.AddSingleton<TokenGenerator>();

builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
})
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = jwtSettings.Get<JwtSettings>().ValidIssuer,
            ValidAudience = jwtSettings.Get<JwtSettings>().ValidAudience,
            ClockSkew = TimeSpan.Zero,
            IssuerSigningKey = new SymmetricSecurityKey(
                Encoding.UTF8.GetBytes(jwtSettings.Get<JwtSettings>().IssuerSigningKey))
        };
    });
*/

if (builder.Environment.IsDevelopment())
{
    builder.Services.AddEndpointsApiExplorer();
    builder.Services.AddSwaggerGen();
    builder.Logging.AddConsole();
}

// Adiciona suporte a HTTPS
/*builder.WebHost.ConfigureKestrel(serverOptions =>
{
    // Configuração para ambiente de desenvolvimento
    if (builder.Environment.IsDevelopment())
    {
        serverOptions.ListenLocalhost(8081, listenOptions =>
        {
            listenOptions.UseHttps("/root/.aspnet/https/TokenApi.pfx", "62f3b351-eecc-40e5-93aa-79b22ff6cd2d");
        });
    }
    else
    {
        // Configuração para produção ou outros ambientes
        serverOptions.ListenAnyIP(444, listenOptions =>
        {
            listenOptions.UseHttps();
        });
    }
});
*/

var app = builder.Build();

// app.UseAuthentication();
//app.UseAuthorization();

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

var tokenApi = app.MapGroup("/token");




app.MapPost("/login", [Authorize] (TokenGenerator tokenService, LoginDto loginDto, HttpContext httpContext) =>
{
    // login only can be called from a valid app token 
    bool? isValidUser = httpContext.User.Identity?.IsAuthenticated; // Simulação

    if (isValidUser ?? false)
    {
        // Generated a L1 authenticated token for the user
        var accessToken = tokenService.GenerateJwtToken(true, false, loginDto.Username); // Implemente este método
        return Results.Ok(new TokenResponseDto() { Token  = accessToken });
    }

    return Results.Unauthorized();
});

tokenApi.MapPost("/request-token", (TokenGenerator tokenService, TokenRequestDto requestDto) =>
{
    try
    {
        // Generates a L0 authentication token. Without this caller cannot have access to the Login neither registration API
        var token = tokenService.GenerateTemporaryToken(requestDto);
        return Results.Ok(new TokenResponseDto { Token = token });
    }
    catch (Exception ex)
    {
        return Results.BadRequest(ex.Message);
    }   
});

tokenApi.MapGet("/anonymous-token", [Authorize] (TokenGenerator tokenService, TokenRequestDto appData, HttpContext httpContext) =>
{
    // login only can be called from a valid app token 
    bool? isValidUser = httpContext.User.Identity?.IsAuthenticated;

    if (isValidUser??false)
    {
        // Generated a L1 authenticated token for the user, this token serves only for registration purposes
        var accessToken = tokenService.GenerateJwtToken(true, true);
        return Results.Ok(new TokenResponseDto() { Token = accessToken });
    }

    return Results.Unauthorized();
});

app.MapPost("/health", () =>
{
    return Results.Ok(Results.Empty);
});

app.MapPost("/", () =>
{
    return Results.Ok("Olá mundo!");
});

app.Run();

